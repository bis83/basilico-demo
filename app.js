(()=>{const h=(e,t,r)=>{e.addEventListener(t,r)},_=()=>document.getElementById("canvas"),D=()=>document.getElementById("message"),I=e=>{const t=D();t.style.display="",t.textContent=e},Y=()=>{const e=D();e.style.display="none"};const W=(e,t)=>Math.floor(e/t),K=(e,t)=>(e%t+t)%t,p=e=>e/180*Math.PI,J=(e,t)=>Math.sqrt(e*e+t*t),x=(e,t)=>{const r=J(e,t);return r!=0?[e/r,t/r]:[0,0]};const Q=([e,t],r,n,o,s)=>r<=e&&e<=n&&o<=t&&t<=s;const U=(e,t)=>e[0]*t[0]+e[1]*t[1]+e[2]*t[2],Z=e=>{const t=U(e,e);return Math.sqrt(t)},ee=(e,t)=>[e[0]+t[0],e[1]+t[1],e[2]+t[2]],te=(e,t)=>[e[0]-t[0],e[1]-t[1],e[2]-t[2]];const V=e=>{const t=Z(e);return[e[0]/t,e[1]/t,e[2]/t]},A=(e,t)=>[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]],M=(e,t)=>{const r=p(e),n=p(t);return[Math.cos(n)*Math.cos(r),Math.sin(n),Math.cos(n)*Math.sin(r)]},re=()=>[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],ne=(e,t)=>[e[0]*t[0]+e[1]*t[4]+e[2]*t[8]+e[3]*t[12],e[0]*t[1]+e[1]*t[5]+e[2]*t[9]+e[3]*t[13],e[0]*t[2]+e[1]*t[6]+e[2]*t[10]+e[3]*t[14],e[0]*t[3]+e[1]*t[7]+e[2]*t[11]+e[3]*t[15],e[4]*t[0]+e[5]*t[4]+e[6]*t[8]+e[7]*t[12],e[4]*t[1]+e[5]*t[5]+e[6]*t[9]+e[7]*t[13],e[4]*t[2]+e[5]*t[6]+e[6]*t[10]+e[7]*t[14],e[4]*t[3]+e[5]*t[7]+e[6]*t[11]+e[7]*t[15],e[8]*t[0]+e[9]*t[4]+e[10]*t[8]+e[11]*t[12],e[8]*t[1]+e[9]*t[5]+e[10]*t[9]+e[11]*t[13],e[8]*t[2]+e[9]*t[6]+e[10]*t[10]+e[11]*t[14],e[8]*t[3]+e[9]*t[7]+e[10]*t[11]+e[11]*t[15],e[12]*t[0]+e[13]*t[4]+e[14]*t[8]+e[15]*t[12],e[12]*t[1]+e[13]*t[5]+e[14]*t[9]+e[15]*t[13],e[12]*t[2]+e[13]*t[6]+e[14]*t[10]+e[15]*t[14],e[12]*t[3]+e[13]*t[7]+e[14]*t[11]+e[15]*t[15]],oe=e=>{const t=e[0]*e[5]-e[1]*e[4],r=e[0]*e[6]-e[2]*e[4],n=e[0]*e[7]-e[3]*e[4],o=e[1]*e[6]-e[2]*e[5],s=e[1]*e[7]-e[3]*e[5],i=e[2]*e[7]-e[3]*e[6],d=e[8]*e[13]-e[9]*e[12],f=e[8]*e[14]-e[10]*e[12],u=e[8]*e[15]-e[11]*e[12],l=e[9]*e[14]-e[10]*e[13],a=e[9]*e[15]-e[11]*e[13],m=e[10]*e[15]-e[11]*e[14];let c=t*m-r*a+n*l+o*u-s*f+i*d;return c?(c=1/c,[(e[5]*m-e[6]*a+e[7]*l)*c,(e[2]*a-e[1]*m-e[3]*l)*c,(e[13]*i-e[14]*s+e[15]*o)*c,(e[10]*s-e[9]*i-e[11]*o)*c,(e[6]*u-e[4]*m-e[7]*f)*c,(e[0]*m-e[2]*u+e[3]*f)*c,(e[14]*n-e[12]*i-e[15]*r)*c,(e[8]*i-e[10]*n+e[11]*r)*c,(e[4]*a-e[5]*u+e[7]*d)*c,(e[1]*u-e[0]*a-e[3]*d)*c,(e[12]*s-e[13]*n+e[15]*t)*c,(e[9]*n-e[8]*s-e[11]*t)*c,(e[5]*f-e[4]*l-e[6]*d)*c,(e[0]*l-e[1]*f+e[2]*d)*c,(e[13]*r-e[12]*o-e[14]*t)*c,(e[8]*o-e[9]*r+e[10]*t)*c]):re()};const se=(e,t,r,n)=>{e[12]=t,e[13]=r,e[14]=n},ie=(e,t)=>{const r=p(e),n=Math.sin(r),o=Math.cos(r);return[o,0,n,0,0,1,0,0,-n,0,o,0,0,0,0,1]};const ae=(e,t,r)=>{const n=V(te(t,e)),o=V(A(r,n)),s=A(n,o),i=U(e,o),d=U(e,s),f=U(e,n);return[o[0],s[0],n[0],0,o[1],s[1],n[1],0,o[2],s[2],n[2],0,-i,-d,-f,1]},ce=(e,t,r,n)=>{const o=1/Math.tan(e),s=o/t,i=n/(n-r),d=-(i*r);return[s,0,0,0,0,o,0,0,0,0,i,1,0,0,d,0]};const fe=e=>{const t=e.device;e.cbuffer[0]=t.createBuffer({size:512,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),e.cbuffer[1]=t.createBuffer({size:196608,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),e.cbuffer[2]=t.createBuffer({size:65536,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST}),e.cbuffer[3]=t.createBuffer({size:40960,usage:GPUBufferUsage.INDIRECT|GPUBufferUsage.COPY_DST}),e.cbuffer[4]=t.createBuffer({size:49152,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST}),e.cbuffer[5]=t.createBuffer({size:16384,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST}),e.sampler[0]=t.createSampler({magFilter:"linear",minFilter:"linear",mipmapFilter:"linear"}),e.bindGroupLayout[0]=t.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{}},{binding:1,visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT,buffer:{type:"read-only-storage"}}]}),e.bindGroupLayout[1]=t.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,buffer:{}},{binding:1,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"depth"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:3,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:4,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:5,visibility:GPUShaderStage.FRAGMENT,sampler:{}}]}),e.pipelineLayout[0]=t.createPipelineLayout({bindGroupLayouts:[e.bindGroupLayout[0]]}),e.pipelineLayout[1]=t.createPipelineLayout({bindGroupLayouts:[e.bindGroupLayout[1]]}),e.bindGroup[0]=t.createBindGroup({layout:e.bindGroupLayout[0],entries:[{binding:0,resource:{buffer:e.cbuffer[0]}},{binding:1,resource:{buffer:e.cbuffer[1]}}]})},de=(e,t)=>{for(let r=0;r<e.id.length;++r)if(e.id[r].name===t)return r;return-1},le=(e,t)=>{const r=e.device,n=t.camera,o=new Float32Array(68),s=canvas.width/canvas.height,i=p(n.fov),d=M(n.ha,n.va),f=n.eye,u=ee(f,d),a=ae(f,u,[0,1,0]),m=ce(i,s,n.near,n.far),c=ne(a,m),g=oe(c);o.set(c,0),o.set(g,16),o.set(a,32),o.set(f,48);const b=t.light,y=M(b.ha,b.va);o.set(y,52),o.set(b.color,56),o.set(b.ambient0,60),o.set(b.ambient1,64),r.queue.writeBuffer(e.cbuffer[0],0,o)},ue=(e,t)=>{const r=e.device;if(t.lines.length<=0)return;const n=new Float32Array(t.lines.length*3),o=new Uint8Array(t.lines.length*4);for(let s=0;s<t.lines.length;++s){const i=t.lines[s];n[s*3+0]=i.pos[0],n[s*3+1]=i.pos[1],n[s*3+2]=i.pos[2],o[s*4+0]=i.color[0],o[s*4+1]=i.color[1],o[s*4+2]=i.color[2],o[s*4+3]=i.color[3]}r.queue.writeBuffer(e.cbuffer[4],0,n),r.queue.writeBuffer(e.cbuffer[5],0,o)},me=(e,t)=>{const r=e.device,n=[];n.length=e.mesh.length;for(let a=0;a<n.length;++a)n[a]=[];const o=new Float32Array(24),s=4*24;let i=0;for(const a of t.room)for(let m=0;m<a.indices.length;++m){const c=a.node[a.indices[m]];if(!c)continue;const g=K(m,a.divisor),b=W(m,a.divisor),[y,P,S,T,F]=L(a.offset,g*a.unit,0,b*a.unit,0,0);for(const C of c.mesh){const w=a.mesh[C];if(!w)continue;const B=de(e,w.name);if(B<0)continue;for(const H of e.id[B].mesh)n[H].push(i);const[N,$,z,k,q]=L(w.offset,y,P,S,T,F),R=ie(k,q);se(R,N,$,z);const X=v(w.factor0,1,1,1,1),j=v(w.factor1,1,1,1,0);o.set(R,0),o.set(X,16),o.set(j,20),r.queue.writeBuffer(e.cbuffer[1],i*s,o),i+=1}}const d=[];let f=0,u=0;const l=new Uint32Array(5);for(let a=0;a<n.length;++a){if(n[a].length<=0)continue;const m=e.mesh[a],c=n[a].length;r.queue.writeBuffer(e.cbuffer[2],f*4,new Uint32Array(n[a])),l[0]=m.count,l[1]=c,l[2]=0,l[3]=0,l[4]=0,r.queue.writeBuffer(e.cbuffer[3],u,l),d.push({id:a,first:f,offset:u}),f+=c,u+=20}return d},he=e=>{const t=e.device,r=e.canvas;if(r.width!==r.clientWidth||r.height!==r.clientHeight){r.width=r.clientWidth,r.height=r.clientHeight;const n=s=>{e.gbuffer[s]!==void 0&&(e.gbuffer[s].destroy(),delete e.gbuffer[s])};n(0),n(1),n(2),n(3),n(4);const o=s=>{e.bindGroup[s]!==void 0&&delete e.bindGroup[s]};o(1),o(2),o(3)}e.gbuffer[0]===void 0&&(e.gbuffer[0]=t.createTexture({size:[r.width,r.height],format:"depth32float",usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING})),e.gbuffer[1]===void 0&&(e.gbuffer[1]=t.createTexture({size:[r.width,r.height],format:"rgb10a2unorm",usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING})),e.gbuffer[2]===void 0&&(e.gbuffer[2]=t.createTexture({size:[r.width,r.height],format:"rgba8unorm",usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING})),e.gbuffer[3]===void 0&&(e.gbuffer[3]=t.createTexture({size:[r.width,r.height],format:"rgba8unorm",usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING})),e.gbuffer[4]===void 0&&(e.gbuffer[4]=t.createTexture({size:[r.width,r.height],format:"rgba16float",usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING})),e.bindGroup[1]===void 0&&(e.bindGroup[1]=t.createBindGroup({layout:e.bindGroupLayout[1],entries:[{binding:0,resource:{buffer:e.cbuffer[0]}},{binding:1,resource:e.gbuffer[0].createView()},{binding:2,resource:e.gbuffer[1].createView()},{binding:3,resource:e.gbuffer[2].createView()},{binding:4,resource:e.gbuffer[3].createView()},{binding:5,resource:e.sampler[0]}]})),e.bindGroup[2]===void 0&&(e.bindGroup[2]=t.createBindGroup({layout:e.bindGroupLayout[1],entries:[{binding:0,resource:{buffer:e.cbuffer[0]}},{binding:1,resource:e.gbuffer[0].createView()},{binding:2,resource:e.gbuffer[1].createView()},{binding:3,resource:e.gbuffer[1].createView()},{binding:4,resource:e.gbuffer[1].createView()},{binding:5,resource:e.sampler[0]}]})),e.bindGroup[3]===void 0&&(e.bindGroup[3]=t.createBindGroup({layout:e.bindGroupLayout[1],entries:[{binding:0,resource:{buffer:e.cbuffer[0]}},{binding:1,resource:e.gbuffer[0].createView()},{binding:2,resource:e.gbuffer[4].createView()},{binding:3,resource:e.gbuffer[4].createView()},{binding:4,resource:e.gbuffer[4].createView()},{binding:5,resource:e.sampler[0]}]}))},be=e=>{const t=e.device;e.pipeline[0]=t.createRenderPipeline({layout:e.pipelineLayout[0],vertex:{module:e.shader[0],entryPoint:"VS",buffers:[{arrayStride:4,attributes:[{format:"uint32",offset:0,shaderLocation:0}],stepMode:"instance"},{arrayStride:12,attributes:[{format:"float32x3",offset:0,shaderLocation:1}]},{arrayStride:12,attributes:[{format:"float32x3",offset:0,shaderLocation:2}]}]},fragment:{module:e.shader[0],entryPoint:"FS",targets:[{format:"rgb10a2unorm"},{format:"rgba8unorm"},{format:"rgba8unorm"}]},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth32float"},primitive:{cullMode:"back",frontFace:"cw"}}),e.pipeline[1]=t.createRenderPipeline({layout:e.pipelineLayout[1],vertex:{module:e.shader[1],entryPoint:"VS",buffers:[]},fragment:{module:e.shader[1],entryPoint:"FS_SSAO",targets:[{format:"rgba8unorm",blend:{color:{operation:"min",srcFactor:"one",dstFactor:"one"},alpha:{}},writeMask:GPUColorWrite.RED}]}}),e.pipeline[2]=t.createRenderPipeline({layout:e.pipelineLayout[1],vertex:{module:e.shader[1],entryPoint:"VS",buffers:[]},fragment:{module:e.shader[1],entryPoint:"FS_HDR",targets:[{format:"rgba16float"}]},depthStencil:{depthWriteEnabled:!1,depthCompare:"not-equal",format:"depth32float"}}),e.pipeline[3]=t.createRenderPipeline({layout:e.pipelineLayout[1],vertex:{module:e.shader[1],entryPoint:"VS",buffers:[]},fragment:{module:e.shader[1],entryPoint:"FS_HDRSky",targets:[{format:"rgba16float"}]},depthStencil:{depthWriteEnabled:!1,depthCompare:"equal",format:"depth32float"}}),e.pipeline[4]=t.createRenderPipeline({layout:e.pipelineLayout[1],vertex:{module:e.shader[1],entryPoint:"VS",buffers:[]},fragment:{module:e.shader[1],entryPoint:"FS_HDR2LDR",targets:[{format:e.canvasFormat}]},depthStencil:{depthWriteEnabled:!1,depthCompare:"always",format:"depth32float"}}),e.pipeline[5]=t.createRenderPipeline({layout:e.pipelineLayout[0],vertex:{module:e.shader[2],entryPoint:"VS",buffers:[{arrayStride:12,attributes:[{format:"float32x3",offset:0,shaderLocation:0}]},{arrayStride:4,attributes:[{format:"unorm8x4",offset:0,shaderLocation:1}]}]},fragment:{module:e.shader[2],entryPoint:"FS",targets:[{format:e.canvasFormat}]},depthStencil:{depthWriteEnabled:!1,depthCompare:"less",format:"depth32float"},primitive:{topology:"line-list"}})},ge=e=>{he(e)},pe=e=>{const t=e.device,r=e.context,n=t.createCommandEncoder();n.beginRenderPass({colorAttachments:[{view:r.getCurrentTexture().createView(),clearValue:{r:.2,g:.2,b:.2,a:1},loadOp:"clear",storeOp:"store"}]}).end(),t.queue.submit([n.finish()])},ye=(e,t)=>{const r=e.device,n=e.context;le(e,t),ue(e,t);const o=me(e,t),s=r.createCommandEncoder();{const i=s.beginRenderPass({depthStencilAttachment:{view:e.gbuffer[0].createView(),depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"},colorAttachments:[{view:e.gbuffer[1].createView(),clearValue:{r:0,g:0,b:0,a:0},loadOp:"clear",storeOp:"store"},{view:e.gbuffer[2].createView(),clearValue:{r:0,g:0,b:0,a:0},loadOp:"clear",storeOp:"store"},{view:e.gbuffer[3].createView(),clearValue:{r:1,g:0,b:0,a:0},loadOp:"clear",storeOp:"store"}]});for(const d of o){i.setPipeline(e.pipeline[0]),i.setBindGroup(0,e.bindGroup[0]),i.setVertexBuffer(0,e.cbuffer[2],d.first*4);const f=e.mesh[d.id];if(f.vb0){const[u,l,a]=f.vb0;i.setVertexBuffer(1,e.buffer[u],l,a)}if(f.vb1){const[u,l,a]=f.vb1;i.setVertexBuffer(2,e.buffer[u],l,a)}if(f.ib){const[u,l,a]=f.ib;i.setIndexBuffer(e.buffer[u],"uint16",l,a)}i.drawIndexedIndirect(e.cbuffer[3],d.offset)}i.end()}{const i=s.beginRenderPass({colorAttachments:[{view:e.gbuffer[3].createView(),loadOp:"load",storeOp:"store"}]});i.setPipeline(e.pipeline[1]),i.setBindGroup(0,e.bindGroup[2]),i.draw(4),i.end()}{const i=s.beginRenderPass({depthStencilAttachment:{view:e.gbuffer[0].createView(),depthReadOnly:!0},colorAttachments:[{view:e.gbuffer[4].createView(),clearValue:{r:0,g:0,b:0,a:0},loadOp:"clear",storeOp:"store"}]});i.setPipeline(e.pipeline[2]),i.setBindGroup(0,e.bindGroup[1]),i.draw(4),i.setPipeline(e.pipeline[3]),i.draw(4),i.end()}{const i=s.beginRenderPass({depthStencilAttachment:{view:e.gbuffer[0].createView(),depthReadOnly:!0},colorAttachments:[{view:n.getCurrentTexture().createView(),clearValue:{r:0,g:0,b:0,a:0},loadOp:"clear",storeOp:"store"}]});i.setPipeline(e.pipeline[4]),i.setBindGroup(0,e.bindGroup[3]),i.draw(4),t.lines.length>0&&(i.setPipeline(e.pipeline[5]),i.setBindGroup(0,e.bindGroup[0]),i.setVertexBuffer(0,e.cbuffer[4]),i.setVertexBuffer(1,e.cbuffer[5]),i.draw(t.lines.length)),i.end()}r.queue.submit([s.finish()])},we=e=>{const t=(r,n,o)=>{switch(n){case"KeyW":r.w=o;break;case"KeyA":r.a=o;break;case"KeyS":r.s=o;break;case"KeyD":r.d=o;break;case"ArrowUp":r.up=o;break;case"ArrowLeft":r.left=o;break;case"ArrowDown":r.down=o;break;case"ArrowRight":r.right=o;break;case"KeyQ":r.q=o;break;case"KeyE":r.e=o;break;case"KeyZ":r.z=o;break;case"KeyX":r.x=o;break;case"Space":r.space=o;break;case"ControlLeft":r.lctrl=o;break;case"Escape":r.esc=o;break;default:return!1}return!0};h(window,"focus",r=>{}),h(window,"blur",r=>{for(const n in e.keyboard)e.keyboard[n]=!1}),h(window,"resize",r=>{}),h(window,"gamepadconnected",r=>{e.gamepad.index=r.gamepad.index}),h(window,"gamepaddisconnected",r=>{e.gamepad.index===r.gamepad.index&&(e.gamepad.index=null)}),h(document,"keydown",r=>{t(e.keyboard,r.code,!0)&&r.preventDefault()}),h(document,"keyup",r=>{t(e.keyboard,r.code,!1)&&r.preventDefault()}),h(document.body,"contextmenu",r=>{r.preventDefault()}),h(document.body,"pointerdown",r=>{e.touch.set(r.pointerId,{x:r.clientX,y:r.clientY,sx:r.clientX,sy:r.clientY,time:performance.now()})}),h(document.body,"pointerup",r=>{e.touch.delete(r.pointerId)}),h(document.body,"pointerout",r=>{e.touch.delete(r.pointerId)}),h(document.body,"pointermove",r=>{const n=e.touch.get(r.pointerId);n&&(n.x=r.clientX,n.y=r.clientY)})},xe=(e,t)=>{if(e.timer.dt=(t-e.timer.t)/1e3,e.timer.t=t,e.timer.n+=1,e.gamepad.index!==null){const n=navigator.getGamepads()[e.gamepad.index];e.gamepad.lx=Math.trunc(n.axes[0]*4)/4,e.gamepad.ly=Math.trunc(n.axes[1]*4)/4,e.gamepad.rx=Math.trunc(n.axes[2]*4)/4,e.gamepad.ry=Math.trunc(n.axes[3]*4)/4,e.gamepad.b0=n.buttons[0].value>=.5,e.gamepad.b1=n.buttons[1].value>=.5,e.gamepad.b8=n.buttons[8].value>=.5,e.gamepad.b9=n.buttons[9].value>=.5,e.gamepad.lb=n.buttons[4].value>=.5,e.gamepad.rb=n.buttons[5].value>=.5,e.gamepad.lt=n.buttons[6].value>=.5,e.gamepad.rt=n.buttons[7].value>=.5}},ve=e=>e.timer.dt,G=(e,t,r,n)=>{if(n){for(const o of e.touch.values())if(Q([o.sx,o.sy],...n)){const s=o.x-o.sx,i=-(o.y-o.sy);return x(s,i)}}if(t){if(t==="wasd"){const o=e.keyboard,s=o.a?-1:o.d?1:0,i=o.w?1:o.s?-1:0;if(s!==0||i!==0)return x(s,i)}else if(t==="arrow"){const o=e.keyboard,s=o.right?1:o.left?-1:0,i=o.up?1:o.down?-1:0;if(s!==0||i!==0)return x(s,i)}else if(e.keyboard[t])return[1,0]}if(r){if(r==="left-stick"){const o=e.gamepad;return x(o.lx,-o.ly)}else if(r==="right-stick"){const o=e.gamepad;return x(o.rx,-o.ry)}else if(e.gamepad[r])return[1,0]}return null},Ge=e=>{e.camera={eye:[0,0,0],ha:0,va:0,fov:30,near:.1,far:1e3},e.light={ha:0,va:0,color:[0,0,0,0],ambient0:[0,0,0,0],ambient1:[0,0,0,0]},e.room=[],e.celeste=[],e.mob=[],e.lines=[]},E=(e,t)=>{Ue(e,t),Pe(e,t),Se(e,t),Te(e,t)},Ue=(e,t)=>{t.camera&&Object.assign(e.camera,t.camera)},Pe=(e,t)=>{t.light&&(t.light.ha!==void 0&&(e.light.ha=t.light.ha),t.light.va!==void 0&&(e.light.va=t.light.va),e.light.color=v(t.light.color,0,0,0,0),e.light.ambient0=v(t.light.ambient0,0,0,0,0),e.light.ambient1=v(t.light.ambient1,0,0,0,0))},Se=(e,t)=>{t.room&&(e.room=t.room)},Te=(e,t)=>{if(t.lines)for(const r of t.lines)e.lines.push({pos:r.from,color:r.color}),e.lines.push({pos:r.to,color:r.color})},L=(e,t,r,n,o,s)=>(e&&(t+=e.x||0,r+=e.y||0,n+=e.z||0,o+=e.ha||0,s+=e.va||0),[t,r,n,o,s]),v=(e,t,r,n,o)=>(e&&(e.r!==void 0&&(t=e.r),e.g!==void 0&&(r=e.g),e.r!==void 0&&(n=e.b),e.a!==void 0&&(o=e.a)),[t,r,n,o]),_e=e=>{e.loading+=1,(async()=>{const n=await(await fetch("app.json")).json();if(n.gpu){const o=e.gpu.device;if(n.gpu.buffer)for(let s=0;s<n.gpu.buffer.length;++s){const i=n.gpu.buffer[s],d=await Ee(n.embed[i.embed]),f=o.createBuffer({size:d.length,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.INDEX,mappedAtCreation:!0}),u=new DataView(f.getMappedRange());for(let l=0;l<d.length;++l)u.setUint8(l,d[l]);f.unmap(),n.gpu.buffer[s]=f}if(n.gpu.shader)for(let s=0;s<n.gpu.shader.length;++s){const i=n.gpu.shader[s],d=await Be(n.embed[i.embed]),f=o.createShaderModule({code:d});n.gpu.shader[s]=f}Object.assign(e.gpu,n.gpu),be(e.gpu)}n.audio&&Object.assign(e.audio,n.audio),n.json&&(e.json=n.json),e.loading-=1})()},Ee=async e=>{const t=window.atob(e),r=new Uint8Array(t.length);for(let s=0;s<t.length;++s)r[s]=t.charCodeAt(s);const n=new Blob([r]).stream().pipeThrough(new DecompressionStream("deflate-raw")),o=await new Response(n).arrayBuffer();return new Uint8Array(o)},Be=async e=>{const t=window.atob(e),r=new Uint8Array(t.length);for(let s=0;s<t.length;++s)r[s]=t.charCodeAt(s);const n=new Blob([r]).stream().pipeThrough(new DecompressionStream("deflate-raw"));return await new Response(n).text()},Re=async(e,t)=>{if(!navigator.gpu){I("ERROR: WebGPU not supported.");return}const r={loading:0,gpu:{bindGroupLayout:[],pipelineLayout:[],shaderModule:[],pipeline:[],sampler:[],bindGroup:[],cbuffer:[],gbuffer:[]},audio:{},listen:{timer:{t:performance.now(),dt:0,n:0},gamepad:{index:null,lx:0,ly:0,rx:0,ry:0,b0:!1,b1:!1,b8:!1,b9:!1,lb:!1,rb:!1,lt:!1,rt:!1},keyboard:{w:!1,a:!1,s:!1,d:!1,up:!1,left:!1,down:!1,right:!1,q:!1,e:!1,z:!1,x:!1,space:!1,lctrl:!1,esc:!1},touch:new Map},json:{},view:{}};r.gpu.adapter=await navigator.gpu.requestAdapter(),r.gpu.device=await r.gpu.adapter.requestDevice(),r.gpu.canvasFormat=navigator.gpu.getPreferredCanvasFormat(),r.gpu.canvas=_(),r.gpu.context=r.gpu.canvas.getContext("webgpu"),r.gpu.context.configure({device:r.gpu.device,format:r.gpu.canvasFormat,alphaMode:"opaque"}),fe(r.gpu),we(r.listen),Ge(r.view),_e(r);const n=o=>{xe(r.listen,o),ge(r.gpu),Ve(r)?pe(r.gpu):(e&&(e(r),e=null),t&&t(r),ye(r.gpu,r.view)),requestAnimationFrame(n)};requestAnimationFrame(n)},Ve=e=>e.loading>0,O=(e,t)=>e.json[t],Ae=e=>{Y(),E(e.view,O(e,"sample")),E(e.view,O(e,"room000")),Le(e)},Me=e=>{const t=e.listen,r=e.view,n=r.camera,o=[0,_().clientWidth,0,_().clientHeight],s=ve(t),i=G(t,"wasd","left-stick"),d=G(t,"arrow","right-stick",o);if(d){const m=-d[0],c=d[1];n.ha+=90*s*m,n.va+=90*s*c,n.va=Math.max(-60,Math.min(n.va,80))}if(i){const m=p(n.ha+90),c=p(n.ha),g=-i[0],b=i[1],y=g*Math.cos(m)+b*Math.cos(c),P=g*Math.sin(m)+b*Math.sin(c),S=2*s*y,T=2*s*P;n.eye[0]+=S,n.eye[2]+=T}G(t,"q","lb")&&(n.eye[1]-=.75*s),G(t,"e","rb")&&(n.eye[1]+=.75*s);const l=r.light;l.ha+=45*s};h(window,"load",()=>{I("Welcome Basilico."),Re(Ae,Me)});const Le=e=>{const t=[];t.push({from:[-50,0,0],to:[50,0,0],color:[255,0,0,255]}),t.push({from:[0,0,-50],to:[0,0,50],color:[0,0,255,255]}),E(e.view,{lines:t})};})();
